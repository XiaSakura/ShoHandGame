package com.poker.service;

import java.io.DataInputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.poker.domain.Card;
import com.poker.domain.Message;
import com.poker.domain.Player;
import com.poker.server.ServerMain;

/**
 * @author q9826
 * 
 */
public class ReadMes extends Thread {
	private Socket socket;

	public ReadMes(Socket socket) {
		this.socket = socket;
	}

	public void run() {
		DataInputStream objInput = null;
		try {
			objInput = new DataInputStream(socket.getInputStream());
			while (true) {
				String clientInputStr = (String) objInput.readUTF();
				if (clientInputStr != null && clientInputStr.length() > 0) {
					System.out.println(clientInputStr);
					JSONObject jsonObject = JSONObject.parseObject(clientInputStr);
					if (jsonObject != null) {
						// 解析 jsonObject
						readMes(jsonObject);
					}
				}

			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			System.out.println("数据解析异常" + e.getMessage());
		}

	}

	/**
	 * 根据jsonObject 进行解析
	 */
	public void readMes(JSONObject jsonObject) {
		int status_code = jsonObject.getIntValue("status_code");
		switch (status_code) {
		case 200:
			System.out.println("200");
			// 发送消息给客户端成功
			// 获得玩家姓名
			String name = jsonObject.getString("player_name");
			for (int i = 0; i < ServerMain.players.size(); i++) {
				if (ServerMain.players.get(i).getSocket().equals(socket)) { // 判断是否是当前玩家 修改名字
					ServerMain.players.get(i).setName(name);
				}
			}
			// 进行相应的操作
			if (ServerMain.players.size() == 2) {
				Message message = new Message();
				message.setStatus_code(102); // 102代表开房成功
				message.setPlayers(ServerMain.players);
				// 判断当前玩家谁的牌大 这里只比较牌值
				int id = CompareBrand();
				message.setId(id);
				JSONObject object = new JSONObject();
				object.put("status_code", message.getStatus_code());
				JSONArray array = new JSONArray();
				for (int i = 0; i < message.getPlayers().size(); i++) {
					Player player = message.getPlayers().get(i);
					array.add(player.toJSONObject());
				}
				object.put("players", array);
				// 需要给所有 玩家发送消息
				object.put("current_player_id", message.getId());

				Dealer.sendMes.flag = 0; // 开启广播
				Dealer.sendMes.msg.add(object.toJSONString());
			}

			break;
		case 201:
			break;
		case 203: // 203代表客户端 请求服务器发牌 只需要返回给客户端一张牌
			System.out.println("203");
			// 获取当前玩家id
			int current_player_id = jsonObject.getIntValue("current_player_id");
			System.out.println("当前请求发牌的玩家" + current_player_id);
			for (int i = 0; i < ServerMain.players.size(); i++) {
				Player player = ServerMain.players.get(i);
				if (player.getId() == current_player_id) {
					Card card = Dealer.deal(player);// 请求发一张牌
					// 返回给客户端
					JSONObject object = new JSONObject();
					object.put("status_code", 103);// 103代表请求牌成功
					object.put("card", card.toJSONObject());// 返回给客户端一张牌
					Dealer.sendMes.flag = 0; // 开启广播
					Dealer.sendMes.msg.add(object.toJSONString());
				}
			}
			break;
		case 204:
			System.out.println("204");
			
			//计算规则
			//TODO 统计出赢家 
		case 205:
			//当前玩家pass 轮转给下一个玩家
			System.out.println("205");
			
			
			break;
		default:
			break;
		}
	}

	private int CompareBrand() {
		List<Player> players = ServerMain.players;
		int play_num = players.size();
		// 得到每一个玩家最近的一张牌
		List<Card> cards = new ArrayList<>();
		// 得到最新的一张牌
		for (int i = 0; i < play_num; i++) {
			List<Card> card2 = players.get(i).getCards();
			cards.add(card2.get(0));
		}
		Collections.sort(cards);
		System.out.println(cards);
		int size = cards.size();
		Card card = cards.get(size - 1);
		// 找到最大的那张牌的玩家
		for (int i = 0; i < play_num; i++) {
			List<Card> cards2 = players.get(i).getCards();
			for (int j = 0; j < cards2.size(); j++) {
				if (cards2.get(j).equals(card)) {
					return players.get(i).getId();
				}
			}
		}

		return 0;
	}

}